# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

#checkpoint = true
#checkpoint-directory = /tmp/

jobs = 1
parent.0 = ../gp/koza/koza.params

seed.0 = 16800
seed.1 = 16801
seed.2 = 16802
seed.3 = 16803
seed.4 = 16804
seed.5 = 16805
seed.6 = 16806
seed.7 = 16807
seed.8 = 16808
seed.9 = 16809
seed.10 = 16810
seed.11 = 16811
seed.12 = 16812
seed.13 = 16813
seed.14 = 16814
seed.15 = 16815


breed = ec.app.JSP.MyBreeder

#The number of population size
pop.subpop.0.size = 1000
pop.subpop.0=ec.SubpopulationEx

#The max generations
generations = 15


# We have one function set, of class GPFunctionSet
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet

# Subsidiary pipelines:
breed.elite.0 = 50
# We want to reevaluate elites
breed.reevaluate-elites.0 = false

#loadFromFile = true
#pop.file = /tmp/allRules.log
pop.subpop.0.species.pipe.num-sources = 1
pop.subpop.0.species.pipe.source.0 = ec.app.JSP.NewDuplicateRemovalCrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.99
pop.subpop.0.species.pipe.source.1 = ec.app.JSP.NewDuplicateRemovalMutationPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.01

#gp.koza.xover.source.0 = ec.app.JSP.Selection.IndifferenceZoneSelection
#gp.koza.xover.source.1 = same
#gp.koza.mutate.source.0 = ec.app.JSP.Selection.IndifferenceZoneSelection

#Duplication Removal (new added parameter 2017.09.14)
pop.subpop.0.duplicate-removals = true
pop.subpop.0.duplicate-removals-tries = 100000

# We'll call the function set "f0".
# We have 17 functions in the function set.  They are:
gp.fs.0.name = f0
gp.fs.0.size = 16
gp.fs.0.func.0 = ec.CDJSP.Terminals.OP_Add
gp.fs.0.func.0.nc = nc2
gp.fs.0.func.1 = ec.CDJSP.Terminals.OP_Divide
gp.fs.0.func.1.nc = nc2
gp.fs.0.func.2 = ec.CDJSP.Terminals.OP_IF
gp.fs.0.func.2.nc = nc3
gp.fs.0.func.3 = ec.CDJSP.Terminals.OP_Subtract
gp.fs.0.func.3.nc = nc2
gp.fs.0.func.4 = ec.CDJSP.Terminals.OP_Max
gp.fs.0.func.4.nc = nc2
gp.fs.0.func.5 = ec.CDJSP.Terminals.OP_Multiply
gp.fs.0.func.5.nc = nc2

gp.fs.0.func.6 = ec.AssignRule.Terminals.M_bSize
gp.fs.0.func.6.nc = nc0
gp.fs.0.func.7 = ec.AssignRule.Terminals.M_capUtil
gp.fs.0.func.7.nc = nc0
gp.fs.0.func.8 = ec.AssignRule.Terminals.M_procTime
gp.fs.0.func.8.nc = nc0
gp.fs.0.func.9 = ec.AssignRule.Terminals.M_qLen
gp.fs.0.func.9.nc = nc0
gp.fs.0.func.10 = ec.AssignRule.Terminals.M_qWait
gp.fs.0.func.10.nc = nc0
gp.fs.0.func.11 = ec.AssignRule.Terminals.M_setup
gp.fs.0.func.11.nc = nc0
gp.fs.0.func.12 = ec.AssignRule.Terminals.M_util
gp.fs.0.func.12.nc = nc0
gp.fs.0.func.13 = ec.AssignRule.Terminals.R_TWT 
gp.fs.0.func.13.nc = nc0
gp.fs.0.func.14 = ec.AssignRule.Terminals.R_WFT 
gp.fs.0.func.14.nc = nc0
gp.fs.0.func.15 = ec.AssignRule.Terminals.R_TP 
gp.fs.0.func.15.nc = nc0

# 0 refers NP PRDecryptor and 1 refers IJPE
pop.subpop.PRDecryptor=0

gp.tree.print-style = c
gp.tree.printTwoArgumentNonterminalsAsOperatorsInC = false

#stat = ec.gp.koza.KozaShortStatistics
stat = ec.app.JSP.ExtendFinalEvaluationStatistics
stat.do-per-generation-description = true
stat.file = /log/Result_Evaluation.stat
stat.fileEx = /log/allRules.log

stat.num-children = 1
stat.child.0 = ec.app.JSP.MyGPStatistics
#stat.child.0 = ec.gp.koza.KozaShortStatistics
stat.child.0.do-depth = true
stat.child.0.do-time = true
stat.child.0.do-size = true
stat.child.0.file = /log/Details_Evaluation.stat

#The evaluator for in-generation fitness
eval=ec.simple.SimpleEvaluator
#eval = ec.app.JSP.TSIDOCBAEvaluator
#eval = ec.app.JSP.OCBAEvaluator
#eval = ec.app.JSP.KnowledgeGradientEvaluator
#eval = ec.app.JSP.KnowledgeGradientEvaluator

eval.problem = ec.AssignRule.RAP
eval.problem.data = ec.CDJSP.DoubleData

# The tree uses an ec.gp.koza.HalfBuilder to create
# itself initially.
# HalfBuilder will pick GROW half the time and FULL
# the other half, with a ramp from 2 to 6 inclusive.
# By ramp we mean that it first picks a random number between
# 2 and 6 inclusive.  This then becomes the *maximum* tree size
# (for the FULL approach, it's the tree size of the tree, for
# GROW, the tree can get no bigger than this)

gp.tc.0.init = ec.gp.koza.HalfBuilder

# We set the default for HalfBuilder to be a ramp of 2--6,
# with a grow probability of 0.5  
gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 6
gp.koza.half.growp = 0.5

#Parsimony Pressure


#Simulation setting
#If use Normalization 0:not in use 1: in use
eval.problem.Normalization = 0 
eval.problem.Simulation.Replications = 1
eval.problem.Simulation.Seed = 8848
eval.problem.Simulation.NumOfJobs = 2500
#1: Mean flowtime 2: CMax 3: TT(Total Tardiness) 4: TWT(Total Weighted Tardiness) 6:tardPercentage
#11: Mean flowtime Deviation
#14: Total Weighted Tardiness Deviation
#15: Num of Tardy Jobs Deviation
eval.problem.Simulation.Objective = 4
#This is type of objective, default is mean, other type is min, max, sum
eval.problem.Simulation.ObjectiveType = mean 
eval.problem.Simulation.UniqueSeed = false

eval.Simulation.IterationBudget = 5
eval.Simulation.WarmupBudget = 5
eval.Simulation.WarmupBudget_Pre = 3
eval.Simulation.FirstStageBudget = 15
eval.Simulation.SecondStageBudget = 0
eval.Simulation.IndifferenceDelta = 0.2



doFinalEvaluation = false
evaluation.UseOldSample = true
evaluation.Seed = 1357924680
#evaluation.Evaluator = EA,IDOCBA,OCBA,KG
evaluation.Evaluator = EA
evaluation.Replications = 1
evaluation.Threshold = 30
evaluation.InitialReplications = 10
evaluation.IterationBudget = 5
evaluation.IDOCBA.WarmupBudget = 5
evaluation.IDOCBA.FirstStageBudget = 5
evaluation.IDOCBA.IndifferenceDelta = 0.01